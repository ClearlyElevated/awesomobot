<nav class="navbar navbar-expand-lg navbar-dark fixed-top">
    <div class="container">
        <a class="navbar-brand" href="/">
            <img src="/img/navbarlogo2.svg" height="30" alt="">
        </a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent-7"
            aria-controls="navbarSupportedContent-7" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarSupportedContent-7">
            <ul class="nav navbar-nav nav-flex-icons ml-auto">
                <li class="nav-item avatar dropdown pr-2 mr-2">
                    <a class="nav-link dropdown-toggle waves-effect waves-light rounded-circle" data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="true">
                        <img id="selected-server" src="https://cdn.discordapp.com/icons/438701535208275978/c5bde67f9f079d283d39b3ae80f5292f.png"
                            class="rounded-circle z-depth-0" style="background-color: #333333;">
                    </a>
                    <div id="server-list" class="dropdown-menu dropdown-menu-right dropdown-feinwaru">
                        <h6 class="font-weight-bold text-center" style="font-size: 0.9em">
                            <%= trans.SELECT_A_SERVER %>
                        </h6>
                    </div>
                </li>
                <li class="nav-item avatar dropdown pr-3 mr-2">
                    <a class="nav-link dropdown-toggle waves-effect waves-light rounded-circle" data-toggle="dropdown"
                        aria-haspopup="true" aria-expanded="true" data-toggle="tooltip">
                        <img id="profile-img" class="rounded-circle z-depth-0">
                    </a>
                    <div class="dropdown-menu dropdown-menu-right dropdown-feinwaru">
                        <h6 class="font-weight-bold text-center" style="font-size: 0.9em">
                            <%= trans.LOGGED_IN_AS %>
                            <span id="username"></span>
                        </h6>
                        <a id="profile-link" class="dropdown-item waves-effect waves-light" href="">
                            <i class="fa fa-user"></i>
                            <%= trans.VIEW_PROFILE %>
                        </a>
                        <a href="/logout" class="dropdown-item waves-effect waves-light" href="#">
                            <i class="fa fa-sign-out-alt"></i>
                            <%= trans.LOGOUT %>
                        </a>
                    </div>
                </li>
                <li class="nav-item">
                    <a class="nav-link waves-effect waves-light" data-toggle="modal" data-target="#LangModal">
                        <i class="far fa-globe"></i>
                        <b>
                            <%= trans.INITIALS %>
                        </b>
                    </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<%- include ../partials/langpicker.ejs %>

<script>
    "use strict";

    function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') {
                c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
                return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    const guildsRequest = new XMLHttpRequest();
    guildsRequest.open("GET", "/api/v3/guilds/@me?extended=true&limit=20", false);
    guildsRequest.send();

    let guildsYay;
    try {

        guildsYay = JSON.parse(guildsRequest.response);
    } catch (error) {

        //toastr["error"](`failed to parse guilds json with error: ${error}`);
        throw `failed to parse guilds json with error: ${error}`;
    }

    /*switch (guildsYay.status) {
        case 200:
            console.log("loaded featured scripts");
            break;
        case 403:
            toastr["error"](`failed to fetch guilds: 403 forbidden`);
            throw "failed to fetch guilds: 403 forbidden";
            break;
        case 404:
            toastr["error"](`failed to fetch guilds: 404 not found`);
            throw "failed to fetch guilds: 404 not found";
            break;
        case 500:
            toastr["error"](`failed to fetch guilds: 500 internal server error`);
            throw "failed to fetch guilds: 500 internal server error";
            break;
        default:
            toastr["error"](`failed to fetch guilds: ${guildsRequest.response.status}`);
            throw `failed to fetch guilds: ${guildsRequest.response.status}`;
    }*/

    const userRequest = new XMLHttpRequest();
    userRequest.open("GET", "/api/v3/users/@me?extended=true", false);
    userRequest.send();

    let userYay;
    try {

        userYay = JSON.parse(userRequest.response);
    } catch (error) {

        toastr["error"](`failed to parse user json with error: ${error}`);
        throw `failed to parse user json with error: ${error}`;
    }

    /*switch (userYay.status) {
        case 200:
            console.log("loaded featured scripts");
            break;
        case 403:
            toastr["error"](`failed to fetch user: 403 forbidden`);
            throw "failed to fetch user: 403 forbidden";
            break;
        case 404:
            toastr["error"](`failed to fetch user: 404 not found`);
            throw "failed to fetch user: 404 not found";
            break;
        case 500:
            toastr["error"](`failed to fetch user: 500 internal server error`);
            throw "failed to fetch user: 500 internal server error";
            break;
        default:
            toastr["error"](`failed to fetch user: ${userRequest.response.status}`);
            throw `failed to fetch user: ${userRequest.response.status}`;
    }*/

    document.getElementById("username").innerText = userYay.user.username;
    document.getElementById("profile-link").href = "/dashboard/profiles/" + userYay.user.discord_id +
        "<%= trans.LANG %>";
    document.getElementById("profile-img").src = "https://cdn.discordapp.com/avatars/" + userYay.user.discord_id + "/" +
        userYay.user.avatar + ".png?size=128";

    const currentServer = getCookie("currentServer");
    const selectedServer = document.getElementById("selected-server");

    if (guildsYay.status == 404) {
        selectedServer.src = "https://cdn.discordapp.com/attachments/379432139856412682/509421343620595734/image.png";
        alert(`AWESOM-O is not on any of your servers. Please add him or join a server with AWESOM-O to continue`);
        window.location.replace("/")
    } else {
        for (let i = 0; i < guildsYay.guilds.length; i++) {

            // in case the user is on no servers with awesomo
            if (currentServer === undefined || currentServer === null || currentServer === "") {

                document.cookie = "currentServer=" + guildsYay.guilds[0].discord_id;
                document.cookie = "currentServerName=" + guildsYay.guilds[0].name;
                selectedServer.src = "https://cdn.discordapp.com/icons/" + guildsYay.guilds[0].discord_id + "/" +
                    guildsYay.guilds[0].icon + ".png";
            }

            if (guildsYay.guilds[i].discord_id === currentServer) {

                selectedServer.src = "https://cdn.discordapp.com/icons/" + guildsYay.guilds[i].discord_id + "/" +
                    guildsYay.guilds[i].icon + ".png";
            }

            document.getElementById("server-list").innerHTML +=
                `
                <a id="${guildsYay.guilds[i].discord_id}" class="dropdown-item waves-effect waves-light server" href="<%= trans.LANG %>">
                    <img src="${"https://cdn.discordapp.com/icons/" + guildsYay.guilds[i].discord_id + "/" + guildsYay.guilds[i].icon + ".png"}" class="rounded-circle z-depth-0 mr-2"
                        style="background-color: #333333; height: 32px"> ${guildsYay.guilds[i].name}
                </a>
            `
        }
    }



    const servers = document.getElementsByClassName("server");
    for (let i = 0; i < servers.length; i++) {

        servers[i].onclick = () => {

            document.cookie = "currentServer=" + servers[i].id;
            document.cookie = "currentServerName=" + servers[i].innerText.trim();
            window.reload();
        }
    }
</script>